/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tradeMenus;
import java.awt.KeyboardFocusManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.table.TableColumnModel;
import positions.commonGui;
import positions.myUtils;
/**
 *
 * @author earlie87
 */
public class tradeRulesDialogForm extends javax.swing.JDialog {

    private static enum TradeTerms{
        oPivotalHL("PivotalHL"),
        oPivotalLH("PivotalLH"),
        oStrength("Strength"),
        oWeakness("Weakness"),
        oMovingAverage("MovingAverage"),
        oHistorical("Historical"),
        oRSIGT("RSIGT"),
        oRSILT("RSILT"),
        oSlopeNeg("NegSlope"),
        oSlopePos("PosSlope"),
        oVolume("Volume");
        private String strVal = "";        
        TradeTerms(String sin){           
            strVal = sin;
        }
        public TradeTerms findTerm(String sin){
            TradeTerms retValue = null;
            for(TradeTerms actTerm: TradeTerms.values()){
                if (actTerm.strVal.equals(sin)){
                    retValue = actTerm;
                }
            }
            return retValue;
        }
    }
    private static enum Logic4Terms{
        oAnd("AND"),
        oOr("OR"),
        oNone("NONE");
        private String strVal = "";
        Logic4Terms(String sin){
            strVal = sin;
        }
        public String toString(){
            return strVal;
        }
    }
    private final String [] movingAveragesList = {"10 Day", "20 Day", "50 Day", "100 Day", "150 Day", "200 Day"};
    private boolean ignoreAction = false;
    private int userSelectedRow;
    Term activeTerm = null;
    TradeTerms activeSelTerm = null;
    javax.swing.JTable activeTermTable = null;
    List<Term> activeTerms = null;
    List<Term> openTerms = new ArrayList <Term>();
    List<Term> closeTerms = new ArrayList <Term>();
    List<File> rulesDirList;
    static final int oOPEN_PANEL = 0;
    static final int oCLOSED_PANEL = 1;
    IOTextFiles.ioRdTextFiles tradeRulesRdTextFile;
    IOTextFiles.ioWrTextFiles tradeRulesWrTextFile;
    IOTextFiles.ioDeleteTextFiles tradeRulesDeleteTextFile;
    IOTextFiles ioTextFiles = new IOTextFiles();
    IOTextFiles.ioListDirectory tradeRulesDirList;
    String prefixDirectory = "";
    String activeTradeRulesName = "";
    final String rulesExtention = ".rules";
    private String homeDirectory = myUtils.getMyWorkingDirectory() + "/src/supportFiles/"; 
    PivotalHL testMe ;
    String userSelectedTermOperation = "Open";
    public class Term {
        private Term daTerm;        
        private String description = "";
        private int andOr = 0; //and == 1, or == 2, 0 == off; 
        private Object andOrSelItem;
        TradeTerms term;
        private Object termSelItem;
        public Term(){            
        }
        public void clearMe(){
            description = "";
            andOr = 0;
            daTerm = null;
        }
        public void getUserInput() {
            
        }
        public void setDescription(String sin){
            description = sin;
        }
        public String getDescription(){
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setTerm(TradeTerms termin){
            term = termin;
        }
        public void setAndOr(int aoin){
            andOr = aoin;
        }
        public boolean isAnd(){
            //if andOr == true, AND function is true, else false;
            return(andOr == 1);
        }
        public boolean isOr(){
            //if andOr == false, OR function is true, else false;
            return(andOr == 2);
        }
        public int getAndOr(){
            return andOr;
        }
        public void setAndOrSelItem(Object i){
            andOrSelItem = i;
        }
        public Object getAndOrSelItem(){
            return andOrSelItem;
        }
        public void setTermSelItem(Object i){
            termSelItem = i;
        }
        public Object getTermSelItem(){
            return termSelItem;
        }
        public Term getDaTerm(){
            return daTerm;
        }
        public void setDaTerm(Term tin){
            daTerm = tin;
        }
    }
    void clearTermTable(){
        for (int row = 0; row < activeTermTable.getRowCount(); row++){
            for (int col = 0; col < activeTermTable.getColumnCount(); col++){
                activeTermTable.getModel().setValueAt(null, row, col);
            }
        }
    }
    void clearRulesFileListTable(){
        for (int row = 0; row < rulesFilesTable.getRowCount(); row++){
            for (int col = 0; col < rulesFilesTable.getColumnCount(); col++){
                rulesFilesTable.getModel().setValueAt(null, row, col);
            }
        }
    }
    void updateRulesFileListTable(List<File> rulesList){
        clearRulesFileListTable();
        for(int row = 0; row < rulesList.size(); row++){
            rulesFilesTable.getModel().setValueAt(rulesList.get(row).getName(), row, 0);            
        }    
    }
    void updateTermTable(){
        //update activerTermTable..row #'s same as terms table index..
        //Term actTerm = new Term();
        Term actTerm;
        int sz = 0;
        clearTermTable();  
        
        for(int row = 0; row < activeTerms.size(); row++){ 
            actTerm = (Term)activeTerms.get(row);
            //actTerm = actTerm.getDaTerm();
            activeTermTable.getModel().setValueAt(actTerm.getTermSelItem(), row, 0);
            activeTermTable.getModel().setValueAt(actTerm.getDescription(), row, 1);
            activeTermTable.getModel().setValueAt(actTerm.getAndOrSelItem(), row, 2); 
            //andOrComboBox.setSelectedItem(actTerm.andOrSelItem);
        }        
    }
    int termTableUsedRows(){
        int retv = 0;
        System.out.println("\nactiveTermTable.getRowCnt: " + activeTermTable.getRowCount());
        for(int row = 0; row < activeTermTable.getRowCount(); row++){
            //if first two columns in row are accupied count it as one. Last AND OR maybe not be set so ignore.
            if ((activeTermTable.getModel().getValueAt(row, 0) != null) && (activeTermTable.getModel().getValueAt(row, 1) != null)){
                retv++;
            }
        }
        return retv;
    }
    public void wrTermsToTextFile(){
        int sz = activeTerms.size();
        int idx = 0;
        boolean done = false;
        boolean openTermsDone = false;
        boolean closeTermsDone = false;
        String termOperation = "";
        if(ioTextFiles.doesFileExist(activeTradeRulesName + rulesExtention)){
            if (commonGui.postConfirmationMsg("File Exists. Overwrite?") != 0){
                return;
            }
        }
        tradeRulesWrTextFile = ioTextFiles.new ioWrTextFiles(activeTradeRulesName + rulesExtention, false);       
        Term actTerm = new Term();
        if (activeTerms.equals(openTerms)) {
            System.out.println("\nterm op == open");
            termOperation = "Open";
        } else if (activeTerms.equals(closeTerms)) {
            System.out.println("\nterm op == close");
            termOperation = "Close";
        } else {
            done = true;
        }
        while (!done) {
            sz = activeTerms.size();
            tradeRulesWrTextFile.write("//Term Operation");
            tradeRulesWrTextFile.write(termOperation);
            for (idx = 0; idx < sz; idx++) {
                actTerm = (Term) activeTerms.get(idx);
                tradeRulesWrTextFile.write("//beg");
                tradeRulesWrTextFile.write("//idx");
                tradeRulesWrTextFile.write(Integer.toString(idx));
                tradeRulesWrTextFile.write("//Term strval");
                tradeRulesWrTextFile.write(actTerm.getTerm().strVal);
                tradeRulesWrTextFile.write("//Description");
                tradeRulesWrTextFile.write(actTerm.getDescription());
                tradeRulesWrTextFile.write("//AndOr");
                tradeRulesWrTextFile.write(Integer.toString(actTerm.getAndOr()));
                tradeRulesWrTextFile.write("//AndOrSelItem");
                tradeRulesWrTextFile.write((String) actTerm.getAndOrSelItem());
                tradeRulesWrTextFile.write("//TermSelItem");
                tradeRulesWrTextFile.write((String) actTerm.getTermSelItem());
                switch (actTerm.getTerm()) {
                    case oMovingAverage:
                        tradeRulesWrTextFile.write("//PercentWithin");
                        MovingAverage maTerm = (MovingAverage) actTerm;
                        tradeRulesWrTextFile.write(Double.toString(maTerm.getPercentValue()));
                        break;
                    case oHistorical:
                        tradeRulesWrTextFile.write("//PercentWithin");
                        Historical histTerm = (Historical) actTerm;
                        tradeRulesWrTextFile.write(Double.toString(histTerm.getPercentValue()));
                        tradeRulesWrTextFile.write("//DaysHistory");
                        tradeRulesWrTextFile.write(Integer.toString(histTerm.getDaysHistory()));
                        break;
                    case oRSIGT:
                        tradeRulesWrTextFile.write("//GT RSI");
                        RsiGT rsiGtTerm = (RsiGT) actTerm;
                        tradeRulesWrTextFile.write(Integer.toString(rsiGtTerm.getGtRsi()));
                        break;
                    case oRSILT:
                        tradeRulesWrTextFile.write("//LT RSI");
                        RsiLT rsiLtTerm = (RsiLT) actTerm;
                        tradeRulesWrTextFile.write(Integer.toString(rsiLtTerm.getLtRsi()));
                        break;
                    case oSlopeNeg:
                        tradeRulesWrTextFile.write("//Days history");
                        SlopeNeg snegTerm = (SlopeNeg) actTerm;
                        tradeRulesWrTextFile.write(Integer.toString(snegTerm.getDaysHistory()));
                        break;
                    case oSlopePos:
                        tradeRulesWrTextFile.write("//Days history");
                        SlopePos sposTerm = (SlopePos) actTerm;
                        tradeRulesWrTextFile.write(Integer.toString(sposTerm.getDaysHistory()));
                        break;
                    case oVolume:
                        tradeRulesWrTextFile.write("//VolumeValue");
                        Volume volTerm = (Volume) actTerm;
                        tradeRulesWrTextFile.write(Integer.toString(volTerm.getVolumeVal()));
                        break;
                    default:;
                }/*switch*/
            }/*for*/                
            tradeRulesWrTextFile.write("//end");
            if (activeTerms.equals(openTerms)){
                openTermsDone = true;
                if((closeTerms.size() > 0) && (closeTermsDone == false)){
                    activeTerms = closeTerms;
                    System.out.println("\nterm op == close");
                    termOperation = "Close";
                }else{
                    done = true;
                }
            } else if (activeTerms.equals(closeTerms)) {
                closeTermsDone = true;
                if ((openTerms.size() > 0) && (openTermsDone == false)) {
                    activeTerms = openTerms;
                    System.out.println("\nterm op == open");
                    termOperation = "Open";
                } else {
                    done = true;
                }
            } else {
                done = true;
            }
        }/*while*/ 
        tradeRulesWrTextFile.closeWr();
    }
    List<String> fileBuff = new ArrayList<String>();
    public List<String> fillBuf(IOTextFiles.ioRdTextFiles fileIn){
        /*
        read in only non commented liness in to fileBuff.
        */
        String strin;
        fileBuff.clear();
        List<String> buff = new ArrayList<String>();
        while ((strin = fileIn.read(false)) != null){
            if(strin.contains("//")){
                
            }else{
                buff.add(strin);
            }
        }
        return buff;
    }
    public void rdTermsFromTextFile(String fileNameIn, String ext){
        int index = 0;
        int lcnt = 0;
        String tmpStr = "";
        TradeTerms tradeTerm = TradeTerms.oHistorical;
        tradeRulesRdTextFile = ioTextFiles.new ioRdTextFiles( fileNameIn + ext, false); 
        Term actTerm = null;
        fileBuff = fillBuf(tradeRulesRdTextFile);
        //read term operaton (open/close) first
        userSelectedTermOperation = fileBuff.get(lcnt++);
        if (userSelectedTermOperation.equals("Open")) {
            activeTerms = openTerms;
        } else if (userSelectedTermOperation.equals("Close")) {
            activeTerms = closeTerms;
        }        
        openCloseComboBox.setSelectedItem(userSelectedTermOperation);
        while (lcnt < fileBuff.size()){
            //first index
            index = Integer.valueOf(fileBuff.get(lcnt++));            
            //then term
            tradeTerm = tradeTerm.findTerm(fileBuff.get(lcnt++));
            //actTerm = ttable[tradeTerm.ordinal()];   
            actTerm = getSelectedTerm(tradeTerm);
            actTerm.setTerm(tradeTerm);
            //then description
            actTerm.setDescription(fileBuff.get(lcnt++));
            //then AndOr
            actTerm.setAndOr(Integer.valueOf(fileBuff.get(lcnt++)));
            //then AndOrSelItem
            actTerm.setAndOrSelItem((Object)fileBuff.get(lcnt++));            
            //then selTerm
            actTerm.setTermSelItem((Object)fileBuff.get(lcnt++));
            switch(actTerm.getTerm()){
                case oMovingAverage:
                    MovingAverage maTerm = (MovingAverage)actTerm;   
                    maTerm.setPercentValue(Double.valueOf(fileBuff.get(lcnt++)));                                        
                    break;
                case oHistorical:
                    Historical histTerm = (Historical) actTerm; 
                    histTerm.setPercentValue(Double.valueOf(fileBuff.get(lcnt++))); 
                    histTerm.setDaysHistory(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                case oRSIGT:
                    RsiGT rsiGtTerm = (RsiGT) actTerm;
                    rsiGtTerm.setGtRsi(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                case oRSILT:
                    RsiLT rsiLtTerm = (RsiLT) actTerm;
                    rsiLtTerm.setLtRsi(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                case oSlopeNeg:
                    SlopeNeg snegTerm = (SlopeNeg) actTerm;
                    snegTerm.setDaysHistory(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                case oSlopePos:
                    SlopePos sposTerm = (SlopePos)actTerm;
                    sposTerm.setDaysHistory(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                case oVolume:
                    Volume volTerm = (Volume)actTerm;                    
                    volTerm.setVolumeVal(Integer.valueOf(fileBuff.get(lcnt++)));
                    break;
                default:;    
            }
            //now add item to activeTerms
            activeTerms.add(index, actTerm);
            actTerm = null;
            //read term operaton (open/close) if there is one..
            tmpStr = ((lcnt < fileBuff.size()) ? fileBuff.get(lcnt++): "" );
            if (tmpStr.equals("Open")) {
                activeTerms = openTerms;
                userSelectedTermOperation = tmpStr;
                openCloseComboBox.setSelectedItem(userSelectedTermOperation);
            } else if (tmpStr.equals("Close")) {
                activeTerms = closeTerms;
                userSelectedTermOperation = tmpStr;
                openCloseComboBox.setSelectedItem(userSelectedTermOperation);
            }else if (!tmpStr.equals("")){
                //not there go back one..
                lcnt--;
            }else{
                
            }
        }
        tradeRulesRdTextFile.closeRd();
    }    
    
    public class PivotalHL extends Term{
        /*
        term finds point where the selected MA transitions from Positive slope to Negative Slope.
        usedMA is the selected moving average to use.
        */
        String description = "";
        TradeTerms term = TradeTerms.oPivotalHL;
        String selMA = "";              
        String prompt = "Enter MA To Determine Pivot:";
        public void getUserInput() {            
            boolean result = false;     
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if(result == true){
                selMA = cb.getSelectedItem().toString();
            }            
            description = selMA + " Pivots + to - slope (/\\)";
        }
        public PivotalHL(){
            //super.daTerm = this;            
        } 
        public String getDescription(){            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }        
    }
    private class PivotalLH extends Term{
        /*
        term finds point where the selected MA transitions from Negative slope to Positive Slope.
        usedMA is the selected moving average to use.
        */
        TradeTerms term = TradeTerms.oPivotalLH;
        String selMA = "";
        String description = "";
        String prompt = "Enter MA To Determine Pivot:";
        public void getUserInput() {
            boolean result = false;     
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if(result == true){
                selMA = cb.getSelectedItem().toString();
            }            
            description = selMA + " Pivots - to + slope (\\/)";
        }
        public PivotalLH(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }        
    }
    private class Strength extends Term{
        /*
        term used to show when the selected slope moving to higher values (getting more postive), whether the values
        are positive or negative, so -.45 to -.40 would be strength.
        i.e strength.
        usedMA is the selected moving average to use.
        */
        TradeTerms term = TradeTerms.oStrength;        
        String selMA = "";
        String description = "";
        String prompt = "Enter MA In Determining Strength:";
        public void getUserInput() {
            boolean result = false;     
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if(result == true){
                selMA = cb.getSelectedItem().toString();
            }            
            description = selMA + " Gaining Strength";
        }
        public Strength(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        } 
    }
    private class Weakness extends Term{
        /*
        term used to show when the selected slope is moving down from pos to less postive values (getting more negative)
        i.e weakness, so .78 to .70 would be weakness.
        usedMA is the selected moving average to use.
        */
        TradeTerms term = TradeTerms.oWeakness;
        String selMA = "";
        String description = "";
        String prompt = "Enter MA In Determining Weakness:";
        public void getUserInput() {
            boolean result = false;     
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if(result == true){
                selMA = cb.getSelectedItem().toString();
            }
            description = selMA + " Strength is Weakening";
        }
        public Weakness(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
    }
    private class MovingAverage extends Term{
        /*
        term used to show when the price of a stock is currently a selPercent above or below the selected MA.        
        selMA is the selected moving average to use.
        selPercent is the percent above or below selected MA.
        selAboveMa is true for above ma, false for below ma.
        Term is true when current price is above selMa within 2%, assuming selAboveMa = true, else false.
        Term is true when current price is below selMa with 2%, assuming selAboveMa = false, else false.
        */
        TradeTerms term = TradeTerms.oMovingAverage;
        String selMA = "";
        double selPercent = 0.0;
        boolean selAboveMa = true;
        String description = "";
        String prompt = "Enter % Current Price is above MA:";
        public void getUserInput() {
            boolean result = false;
            JTextField percentField = new JTextField(5);

            percentField.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });

            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter %:"));
            myPanel.add(percentField);
            myPanel.add(Box.createHorizontalStrut(5)); // a spacer
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);              
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){
                selPercent = Double.valueOf(percentField.getText());
                selMA = cb.getSelectedItem().toString();
                description = "Current Price within " + selPercent + "% of " + selMA;
            }                        
        }
        public MovingAverage(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setPercentValue(double din){
            selPercent = din;
        }
        public double getPercentValue(){
            return selPercent;
        }
    }
    private class Historical extends Term{
        /*
        term used to show when the price of a stock has historically been above or below the 
        selectedMA selPercent of the time. 
        example: selAbove = true, selPercent = 60%, selMa = 100, selDaysHistory = 251 (1year): will be true 
        if price for the past year has been above the 100dma 60% of the time.
        if selAbove = false, then true if price has been below the 100dma 60% of the time.
        */
        TradeTerms term = TradeTerms.oHistorical;
        String selMA = "";        
        double selPercent = 0.0;
        boolean selAboveMa = true;
        int selDaysHistory = 0;
        String description = "";
        String prompt = "Enter % Above MA For Last Days:";
        public void getUserInput() {
            boolean result = false;
            JTextField percentField = new JTextField(5);
            JTextField numOfDays = new JTextField(5);
            
            percentField.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            }); 
            numOfDays.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter %:"));
            myPanel.add(percentField);
            myPanel.add(new JLabel("Enter Days:"));
            myPanel.add(numOfDays);
            myPanel.add(Box.createHorizontalStrut(5)); // a spacer
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){
                selPercent = Double.valueOf(percentField.getText());
                selMA = cb.getSelectedItem().toString();
                selDaysHistory = Integer.valueOf(numOfDays.getText());
                description = "Hist Price is above " + selMA + " " + selPercent + "% of time last " + selDaysHistory + " Days";
            }            
        }
        public Historical(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setPercentValue(double din){
            selPercent = din;
        }
        public double getPercentValue(){
            return selPercent;
        }
        public void setDaysHistory(int iin){
            selDaysHistory = iin;
        }
        public int getDaysHistory(){
            return selDaysHistory;
        }
    }  
    private class RsiGT extends Term{
        /*
        term used to show when RSI is above selGreaterThanValue. 
        Example: 
        selGreaterThanValue = 70. Term will be true if RSI is 70 or greater, else false.
        selLessThanValue = 30. Term will be true if RSI is 30 or less, else false.
        */
        TradeTerms term = TradeTerms.oRSIGT;
        int selGreaterThanValue = 0;        
        String description = "";
        String prompt = "Enter High RSI to Beat::";
        public void getUserInput() {
            boolean result = false;
            JTextField greaterThanValueField = new JTextField(5);
           
            greaterThanValueField.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });            
            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter > RSI:"));
            myPanel.add(greaterThanValueField);
                       
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){                
                selGreaterThanValue = Integer.valueOf(greaterThanValueField.getText());                
                description = "RSI Currently > " + selGreaterThanValue;
            }            
        }
        public RsiGT(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setGtRsi(int rsii){
            selGreaterThanValue = rsii;
        }
        public int getGtRsi(){
            return selGreaterThanValue;
        }
    }
        private class RsiLT extends Term{
        /*
        term used to show when RSI is above selGreaterThanValue. 
        Example: 
        selGreaterThanValue = 70. Term will be true if RSI is 70 or greater, else false.
        selLessThanValue = 30. Term will be true if RSI is 30 or less, else false.
        */
        TradeTerms term = TradeTerms.oRSILT;       
        int selLessThanValue = 0;
        String description = "";
        String prompt = "Enter Low RSI To Beat:";
        public void getUserInput() {
            boolean result = false;            
            JTextField lessThanValueField = new JTextField(5);            
            lessThanValueField.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });            
            JPanel myPanel = new JPanel();           
            myPanel.add(new JLabel("Enter < RSI:"));
            myPanel.add(lessThanValueField);           
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){                                
                selLessThanValue = Integer.valueOf(lessThanValueField.getText());
                description = "RSI Currently < " + selLessThanValue;
            }            
        }
        public RsiLT(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setLtRsi(int rsii){
            selLessThanValue = rsii;
        }
        public int getLtRsi(){
            return selLessThanValue;
        }
    }
    private class SlopeNeg extends Term{
        /*
        term used to show when slope of selMa is negative. 
        Example: 
        selMa = 100dma, selDaysBack = 5, true if the slope value is greater than it was 5 days ago, else false.
        */
        TradeTerms term = TradeTerms.oSlopeNeg;
        String selMA = "";
        int selDaysBack = 0;
        String description = "";
        String prompt = "Enter Days Back in determining - slope of MA:";
        public void getUserInput() {
            boolean result = false;
            JTextField numOfDays = new JTextField(5);            
            numOfDays.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter Days:"));
            myPanel.add(numOfDays);
            myPanel.add(Box.createHorizontalStrut(5)); // a spacer
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){                
                selMA = cb.getSelectedItem().toString();
                selDaysBack = Integer.valueOf(numOfDays.getText());
                description = "Slope of " + selMA + " is - for last " + selDaysBack + " days";
            }            
        }
        public SlopeNeg(){
            //super.daTerm = this;              
        }
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setDaysHistory(int dbin){
            selDaysBack = dbin;
        }
        public int getDaysHistory(){
            return selDaysBack;
        }
    }
    private class SlopePos extends Term{
        /*
        term used to show when slope of selMa is positive. 
        Example: 
        selMa = 100dma, selDaysBack = 5, true if the slope value is less than it was 5 days ago, else false.
        */
        TradeTerms term = TradeTerms.oSlopePos;
        String selMA = "";
        int selDaysBack = 0;
        String description = "";
        String prompt = "Enter Days Back in determining + slope of MA:";
        public void getUserInput() {
            boolean result = false;
            JTextField numOfDays = new JTextField(5);
                    
            numOfDays.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });            
            JComboBox cb = new JComboBox(movingAveragesList);            
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter Days:"));
            myPanel.add(numOfDays);
            myPanel.add(Box.createHorizontalStrut(5)); // a spacer
            myPanel.add(new JLabel("Select MA:"));
            myPanel.add(cb);            
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){                
                selMA = cb.getSelectedItem().toString();
                selDaysBack = Integer.valueOf(numOfDays.getText());
                description = "Slope of " + selMA + " is + for last " + selDaysBack + " days";
            }            
        }
        public SlopePos(){
            //super.daTerm = this;              
        }        
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setDaysHistory(int dbin){
            selDaysBack = dbin;
        }
        public int getDaysHistory(){
            return selDaysBack;
        }
    }
    private class Volume extends Term{
        /*
        term used to show when volume is greater then selVolume.
        Example: 
        selVolume set o 150,000, true if current volume is equal to or greater than
        150k.
        */
        TradeTerms term = TradeTerms.oVolume;        
        int selVolume = 0;
        String description = "";
        String prompt = "Enter Volume To Beat:";
        public void getUserInput() {
            boolean result = false;
            JTextField volumeValueField = new JTextField(5);            
            volumeValueField.addActionListener(e -> {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();                       
                manager.focusNextComponent();
            });          
            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Enter Volume:"));
            myPanel.add(volumeValueField);                      
            result = commonGui.getUserInput(prompt, myPanel);
            if (result == true){                
                selVolume = Integer.valueOf(volumeValueField.getText()); 
                description = "Volume is > " + selVolume;
            }            
        }
        public Volume(){
            //super.daTerm = this;              
        } 
        public String getDescription(){
            
            return description;
        }
        public TradeTerms getTerm(){
            return term;
        }
        public void setDescription(String sin){
            description = sin;
        }
        public void setVolumeVal(int vin){
            selVolume = vin;
        }
        public int getVolumeVal(){
            return selVolume;
        }
    }
    static final int a = 0;
    final Term[] ttable = new Term[] {
        new PivotalHL(),
        new PivotalLH(),
        new Strength(),
        new Weakness(),
        new MovingAverage(),
        new Historical(),
        new RsiGT(),
        new RsiLT(),
        new SlopeNeg(),
        new SlopePos(),
        new Volume()
    };
    
    /**
     * Creates new form tradeRulesDialogForm
     * @param parent
     * @param modal
     */    
    public tradeRulesDialogForm(java.awt.Frame parent, boolean modal){
        super(parent, modal);
        initComponents(); 
        addWindowListener(
                new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        setVisible(false);
                        dispose();
                    }
                });
        ignoreAction = true;        
        TableColumnModel tcm;
        termComboBox.removeAllItems();
        for(TradeTerms term : TradeTerms.values()){                       
            termComboBox.addItem(term.toString());
        } 
        andOrComboBox.removeAllItems();
        for(Logic4Terms logic : Logic4Terms.values()){                       
            andOrComboBox.addItem(logic.toString());
        } 
        ignoreAction = false; 
        openTermTable.setColumnSelectionAllowed(true);
        openTermTable.setRowSelectionAllowed(true);
        openTermTable.setRowSelectionInterval(0, 0);
        openTermTable.setColumnSelectionInterval(0, 0); 
        activeTermTable = openTermTable;
        activeTerms = openTerms;     
        tcm = openTermTable.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(150);
        tcm.getColumn(1).setPreferredWidth(500);
        tcm.getColumn(2).setPreferredWidth(150);        
        tradeRulesDirList = ioTextFiles.new ioListDirectory(homeDirectory, "rules");
        rulesDirList = tradeRulesDirList.getList();
        System.out.println("\ntradeRulesDirList size = " + tradeRulesDirList.getSize());
        updateRulesFileListTable(rulesDirList);
        if(openCloseComboBox.getSelectedItem().equals("Open")){
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Open:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));
        }else if (openCloseComboBox.getSelectedItem().equals("Close")){
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Close:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));            
        }else{
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "None", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));
        }
        repaint();
        //openTermTable.setEnabled(false);
    }
    private boolean myCellEditor(int row, int col){        
        boolean retv = false;        
        System.out.println("\nmyCellEditor, row == " + row + " TT row count: " + activeTermTable.getRowCount());
        if(openCloseComboBox.getSelectedItem().equals("Disabled")){
            //commonGui.postToTextAreaMsg("Message", "Select Open OR Close!");
            commonGui.fuckingTest("JAVA!!!!", "FuckYou!!!");
            return false;
        }
        if (row <= activeTerms.size()){
            retv = true;
        }else if (row > activeTerms.size()){
            retv = false;
        }
        /*
        if(activeTerms.isEmpty() && (row == 0)){
            retv = true;
        }else if ((!activeTerms.isEmpty()) && (row == activeTerms.size()))
            retv = true;
        else{
            retv = false;
        }        
        */
        return retv;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        termComboBox = new javax.swing.JComboBox();
        jFrame1 = new javax.swing.JFrame();
        andOrComboBox = new javax.swing.JComboBox();
        aboveBelowButtonGroup = new javax.swing.ButtonGroup();
        topPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        tradeRulesNameTextField = new javax.swing.JTextField();
        clearAllTermsButton = new javax.swing.JButton();
        saveTermsButton = new javax.swing.JButton();
        deleteTermsButton = new javax.swing.JButton();
        openCloseComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        openPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        openTermTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        rulesFilesTable = new javax.swing.JTable();
        rulesFileLoadButton = new javax.swing.JButton();
        rulesFileDeleteButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        termComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        termComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        andOrComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AND", "OR" }));
        andOrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andOrComboBoxActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Trade Rules\n");

        topPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Trade Rules Profile"));

        jLabel3.setText("TradeRulesName:");

        tradeRulesNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeRulesNameTextFieldActionPerformed(evt);
            }
        });

        clearAllTermsButton.setText("DeleteAll");
        clearAllTermsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllTermsButtonActionPerformed(evt);
            }
        });

        saveTermsButton.setText("Save Term(s)");
        saveTermsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTermsButtonActionPerformed(evt);
            }
        });

        deleteTermsButton.setText("DeleteTerm");
        deleteTermsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTermsButtonActionPerformed(evt);
            }
        });

        openCloseComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Disabled", "None", "Open", "Close" }));
        openCloseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCloseComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Open/Close:");

        openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Open When:"));

        openTermTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Term", "Description", "AndOr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return myCellEditor(rowIndex, columnIndex);
                //return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(openTermTable);
        if (openTermTable.getColumnModel().getColumnCount() > 0) {
            openTermTable.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(termComboBox)
            );
            openTermTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(andOrComboBox)
            );
        }

        javax.swing.GroupLayout openPanelLayout = new javax.swing.GroupLayout(openPanel);
        openPanel.setLayout(openPanelLayout);
        openPanelLayout.setHorizontalGroup(
            openPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(openPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        openPanelLayout.setVerticalGroup(
            openPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(saveTermsButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteTermsButton)
                        .addGap(29, 29, 29)
                        .addComponent(clearAllTermsButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(openCloseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(topPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(tradeRulesNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tradeRulesNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openCloseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(openPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTermsButton)
                    .addComponent(deleteTermsButton)
                    .addComponent(clearAllTermsButton))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        rulesFilesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Rules Files"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(rulesFilesTable);

        rulesFileLoadButton.setText("Load");
        rulesFileLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesFileLoadButtonActionPerformed(evt);
            }
        });

        rulesFileDeleteButton.setText("Delete");
        rulesFileDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesFileDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rulesFileLoadButton)
                    .addComponent(rulesFileDeleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(436, 436, 436)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(rulesFileLoadButton)
                .addGap(18, 18, 18)
                .addComponent(rulesFileDeleteButton)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(12, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(12, Short.MAX_VALUE)))
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton)
                    .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(exitButton)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveTermsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTermsButtonActionPerformed
        // TODO add your handling code here:
        int termTableUsedRows = termTableUsedRows();
        activeTradeRulesName = tradeRulesNameTextField.getText();
        
        System.out.println("\ntermTableUsedRows: " + termTableUsedRows());
        //check that last one is added, the one without AND/OR. off by one..      
        if((activeTerms.size()) > 0 && ((termTableUsedRows) == activeTerms.size() + 1)){
            activeTerm.setAndOr(0);
            activeTerm.setAndOrSelItem("None");
            activeTerms.add(activeTerm);
        }
        if(!activeTradeRulesName.isEmpty()){            
            wrTermsToTextFile();
            tradeRulesDirList = ioTextFiles.new ioListDirectory(homeDirectory, "rules");
            rulesDirList = tradeRulesDirList.getList();
            System.out.println("\ntradeRulesDirList size = " + tradeRulesDirList.getSize());
            updateRulesFileListTable(rulesDirList);
        }else{
            commonGui.postInformationMsg("Please Assign a Name before saving.");
        }
    }//GEN-LAST:event_saveTermsButtonActionPerformed

    private void tradeRulesNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeRulesNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeRulesNameTextFieldActionPerformed

    private Term getSelectedTerm(TradeTerms termin){
        /*
        TradeTerms term = TradeTerms.oSlopePos;
        */
        Term retTerm = null;
        switch (termin){
            case oHistorical:
                retTerm = new Historical();
                break;
            case oMovingAverage:
                retTerm = new MovingAverage();
                break;
            case oPivotalHL:
                retTerm = new PivotalHL();
                break;
            case oPivotalLH:
                retTerm = new PivotalLH();
                break;
            case oRSIGT:
                retTerm = new RsiGT();
                break;
            case oRSILT:
                retTerm = new RsiLT();
                break;
            case oSlopeNeg:
                retTerm = new SlopeNeg();
                break;
            case oSlopePos:
                retTerm = new SlopePos();
                break;
            case oStrength:
                retTerm = new Strength();
                break;
            case oVolume:
                retTerm = new Volume();
                break;
            case oWeakness:
                retTerm = new Weakness();
                break;
            default:
                retTerm = null;
        }
        return retTerm;
    }
    private void termComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termComboBoxActionPerformed
        // TODO add your handling code here:  
        int termToAffect = 0;
        boolean replace = false;
        boolean existingTerm = false;
        if (ignoreAction == false) {
            if ((termComboBox.getSelectedItem() != null)) {     
                termToAffect = activeTermTable.getSelectedRow();
                String selTermStr = termComboBox.getSelectedItem().toString();
                System.out.println("\n termComboBoxActionPerformed: row = " + termToAffect);
                System.out.println("\nselTerm: " + selTermStr);
                activeSelTerm = TradeTerms.valueOf(selTermStr);
                existingTerm = ((activeTerms.size() > 0) && (termToAffect <= activeTerms.size()));
                activeTerm = getSelectedTerm(activeSelTerm);
                activeTerm.setTermSelItem(termComboBox.getSelectedItem());               
                activeTerm.clearMe();
                activeTerm.getUserInput();
                activeTerm.setAndOr(0);
                activeTerm.setAndOrSelItem(Logic4Terms.oNone.toString());
                activeTermTable.getModel().setValueAt(activeTerm.getDescription(), termToAffect, 1);
                //andOrComboBox.setSelectedItem(activeTerm.getAndOrSelItem());               
                activeTermTable.setRowSelectionInterval(termToAffect, termToAffect);
                activeTermTable.setColumnSelectionInterval(2, 2);
                termComboBox.setSelectedItem(null);
                System.out.println("\ntermComboBox: selItem = " + termComboBox.getSelectedItem());
            } else {
                System.out.println("\n + termComboBoxActionPerformed selected item == null??");
            }
        }
    }//GEN-LAST:event_termComboBoxActionPerformed

    private void andOrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andOrComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedOp = "";
        Term term = new Term();
        Object tmp;
        int row = 0;
        boolean replace = false;
        boolean changed = false;
        if(ignoreAction == true){
            return;
        }
        //int termToAffect = openTerms.size();   
        int termToAffect = activeTerms.size();
        row = termToAffect = activeTermTable.getSelectedRow();
        System.out.println("\nandOrComboBoxActionPerformed: row = " + row);
        activeTermTable.setRowSelectionInterval(termToAffect, termToAffect);
        activeTermTable.setColumnSelectionInterval(0, 0);
        
        if(activeTerm != null){
            term = activeTerm;
        } else {
            //get term to affect, affect AndOr, then put back ter openTerms...
            term = (termToAffect >= 0) ? activeTerms.get(termToAffect) : null;            
             if(term == null) {
                return;
             }else{        
                 replace = true;
             }             
        }
        if(andOrComboBox.getSelectedItem() != null) {  
            term.setAndOrSelItem(andOrComboBox.getSelectedItem());
            if (term.getAndOrSelItem().equals(Logic4Terms.oAnd.toString())) {
                term.setAndOr(1);
            } else if (term.getAndOrSelItem().equals(Logic4Terms.oOr.toString())) {
                term.setAndOr(2);
            }else{
                term.setAndOr(0);
            }
            changed = true;            
            if(!term.getDescription().isEmpty()){
                //now that we are done with this term add/replace to list..  
                if((replace == true) && (changed == true)){
                    activeTerms.remove(termToAffect);
                    activeTerms.add(termToAffect, term);                 
                }else if (changed == true){
                    activeTerms.add(term);
                }else{
                    
                }                
                activeTerm = null;                
            }                        
        }
    }//GEN-LAST:event_andOrComboBoxActionPerformed

    private void deleteTermsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTermsButtonActionPerformed
        // TODO add your handling code here:
        int selRow = activeTermTable.getSelectedRow();
        //row number == index in terms table..
        if(commonGui.postConfirmationMsg("Delete selected term?") == 0){
            activeTerms.remove(selRow);
            updateTermTable();
        };
    }//GEN-LAST:event_deleteTermsButtonActionPerformed

    private void rulesFileLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesFileLoadButtonActionPerformed
        // TODO add your handling code here:
        int selRow = 0;
        File file = null;        
        selRow = rulesFilesTable.getSelectedRow();
        System.out.println("\rulesFilesTableSelRow:" + selRow);
        file = rulesDirList.get(selRow);
        activeTerms.clear();
        rdTermsFromTextFile(rulesDirList.get(selRow).getName(), ""/*no extension*/);
        clearTermTable();
        updateTermTable();
    }//GEN-LAST:event_rulesFileLoadButtonActionPerformed

    private void clearAllTermsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllTermsButtonActionPerformed
        // TODO add your handling code here:
        activeTerms.clear();
        openTerms.clear();
        closeTerms.clear();
        updateTermTable();
    }//GEN-LAST:event_clearAllTermsButtonActionPerformed

    private void openCloseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCloseComboBoxActionPerformed
        // TODO add your handling code here:
        userSelectedTermOperation = openCloseComboBox.getSelectedItem().toString();
        if(openCloseComboBox.getSelectedItem().equals("Open")){
            if(!activeTerms.equals(openTerms) && (activeTerm != null)){
                //save last term before switching..
                activeTerms.add(activeTerm);
                activeTerm = null;
            }else{
                
            }
            activeTerms = openTerms;
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Open:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));
        }else if (openCloseComboBox.getSelectedItem().equals("Close")){
            if(!activeTerms.equals(closeTerms) && (activeTerm != null)){
                //save last term before switching..
                activeTerms.add(activeTerm);
                activeTerm = null;
            }else{
                
            }
            activeTerms = closeTerms;
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Close:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));
        }else{
            openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "None", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Font", 0, 14)));
        }
        repaint(); 
        openTermTable.setEnabled(true);
        updateTermTable();
    }//GEN-LAST:event_openCloseComboBoxActionPerformed

    private void rulesFileDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesFileDeleteButtonActionPerformed
        // TODO add your handling code here:
        int selRow = 0;
        File file = null;        
        selRow = rulesFilesTable.getSelectedRow();
        System.out.println("\nrulesFilesTableSelRow:" + selRow);
        file = rulesDirList.get(selRow);
        System.out.println("\nfileToDeleteName:" + file.getName());
        System.out.println("\nfileToDeletePath:" + file.getPath());
        IOTextFiles.ioDeleteTextFiles delFile = ioTextFiles.new ioDeleteTextFiles(file.getName());
        if (delFile.delete() == true){
            System.out.println("File deleted.");  
            rulesDirList = tradeRulesDirList.getList();
            updateRulesFileListTable(rulesDirList);
        }else{
            System.out.println("File does not exist?.");
        }                
                
    }//GEN-LAST:event_rulesFileDeleteButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tradeRulesDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tradeRulesDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tradeRulesDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tradeRulesDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                tradeRulesDialogForm dialog = null;
                dialog = new tradeRulesDialogForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aboveBelowButtonGroup;
    private javax.swing.JComboBox andOrComboBox;
    private javax.swing.JButton clearAllTermsButton;
    private javax.swing.JButton deleteTermsButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox openCloseComboBox;
    private javax.swing.JPanel openPanel;
    private javax.swing.JTable openTermTable;
    private javax.swing.JButton rulesFileDeleteButton;
    private javax.swing.JButton rulesFileLoadButton;
    private javax.swing.JTable rulesFilesTable;
    private javax.swing.JButton saveTermsButton;
    private javax.swing.JComboBox termComboBox;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField tradeRulesNameTextField;
    // End of variables declaration//GEN-END:variables
}
