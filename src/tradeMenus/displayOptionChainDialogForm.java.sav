/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package playwithmenus;

import ibTradeApi.ibApi;
import ibTradeApi.ibApi.quoteInfo;
import ibTradeApi.*;
import javax.swing.JOptionPane;
import positions.*;


/**
 *
 * @author earlie87
 */
public class displayOptionChainDialogForm extends javax.swing.JDialog {
    
    private ibApi.quoteInfo qInfo = new ibApi.quoteInfo();
    private ibApi.quoteInfo cInfo = new ibApi.quoteInfo();
    
    private ibApi actIbApi = ibApi.getActApi();
    private int chainSize;
    private ibApi.OptionChain actChain = actIbApi.getActOptionChain();
    private final int CALL = 0;
    private final int PUT = 1;
    private final int sTICKER = 0;
    private final int sLAST = 1;
    private final int sBID = 2;
    private final int sASK = 3;
    private final int sVOLUME = 4;
    private final int oLAST = 0;
    private final int oBID = 1;
    private final int oASK = 2;
    private final int oOI = 3;   
    private final int oVOLUME = 4;
    private final int oDELTA = 5;
    private final int oSTRIKE = 6;
    
    private final int CHAIN_ARRAY_PCSZ = 2;
    private final int CHAIN_ARRAY_ENTRIES = 800;
    private quoteInfo[][] optionChainArray = new quoteInfo[CHAIN_ARRAY_PCSZ][CHAIN_ARRAY_ENTRIES];
    private int chainNum;
    private int optionChainCallArraySz = 0;
    private int optionChainPutArraySz = 0;
    private int cIdx = 0;
    private int pIdx = 0;
    private int pcIdx = 0;
    private int userMonthIdx = 0;
    String userTicker = null;
    String lastTicker = null;
    String userMonth = null;
    String lastUserMonth = null;
    String userFormedOptionDate = null;
    private final int CHAIN_MONTH_SZ = 10;
    String[] optionChainMonthList = new String[CHAIN_MONTH_SZ];
    String[] optionChainMonthOptionSymbol = new String[CHAIN_MONTH_SZ];
    public posCreateData retData;
    /**
     * Creates new form displayOptionChainDialogForm
     */
    public displayOptionChainDialogForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        retData = new posCreateData();
        addWindowListener(
                new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        setVisible(false);
                        dispose();
                    }
                });
        
    }
    public class posCreateData {
        boolean dataReady;
        String stockTicker;
        String optionTicker;
        public posCreateData() {
            dataReady = false;
            stockTicker = null;
            optionTicker = null;
        }
    }
    public void setTickerToStart(String tickerin){
        
        userTicker = tickerin;
        tickerTextField.setText(userTicker);
        
    }
    public void setActivePortfolio(positions posin) {
        
    }
    private void fillMyOptionChain(String ticker, Boolean justUpdate) {
        String tmpStrike = null;
        
        //initialize the option Chain array first..
        for(int pcIdx = 0; pcIdx < CHAIN_ARRAY_PCSZ; pcIdx++) {
            for (int idx = 0; idx < CHAIN_ARRAY_ENTRIES; idx++) {
                optionChainArray[pcIdx][idx] = null;
            }
        }
        if (justUpdate == false) {
            actChain.startNewChain();
            actChain.getOptionChain(ticker);
            userMonth = null;
            
        }
        
        actChain.chainIdxReset();
        chainSize = actChain.chainLeft();   
        /* we should get call then put with the same strike as pairs. 
         * if the strike price changes we increment the store idx (pcIdx).
         * That's why we store the tmpStrike.
         */
        for (chainNum = 0, pcIdx = 0; chainNum <= chainSize;) {
            cInfo = actChain.chainGetNextOrdered(chainNum++);
            if ((cInfo != null) && (cInfo.enStreaming == true)) {
                
                /*
                 * check if we should move to next pair via bump pcidx
                 * take care of initial entry where tmpStrike == null.
                 */
                if (tmpStrike == null) {
                    tmpStrike = String.valueOf(cInfo.strikePrice);
                } else {
                    if (!String.valueOf(cInfo.strikePrice).equals(tmpStrike)) {
                        /*
                         * strike changed so bump to next pair
                         */
                        pcIdx++;
                        tmpStrike = String.valueOf(cInfo.strikePrice);
                    }
                }
                qInfo = actChain.getQuote(cInfo.optionSymbol, true /*
                         * option
                         */);
                
                if (cInfo.cpType.equals("C")) {
                    /*
                     * was the call, so save then read for PUT
                     */
                    qInfo.optionSymbol = cInfo.optionSymbol;
                    qInfo.underlying = cInfo.underlying;
                    optionChainArray[CALL][pcIdx] = qInfo;

                    cInfo = actChain.chainGetNextOrdered(chainNum);
                    if ((cInfo != null) && (cInfo.enStreaming == true)) {
                        /* check if we should move to next pair via bump pcidx */
                        if (!String.valueOf(cInfo.strikePrice).equals(tmpStrike)) {
                            /* strike changed so bump to next pair */
                            pcIdx++;
                            tmpStrike = String.valueOf(cInfo.strikePrice);
                        }
                        qInfo = actChain.getQuote(cInfo.optionSymbol, true /*
                                 * option
                                 */);
                        qInfo.optionSymbol = cInfo.optionSymbol;
                        qInfo.underlying = cInfo.underlying;
                        optionChainArray[PUT][pcIdx] = qInfo;
                    } else {
                    }

                } else {
                    /*
                     * must be PUT, so save then read for CALL
                     */
                    qInfo.optionSymbol = cInfo.optionSymbol;
                    qInfo.underlying = cInfo.underlying;
                    optionChainArray[PUT][pcIdx] = qInfo;

                    cInfo = actChain.chainGetNextOrdered(chainNum);
                    if ((cInfo != null) && (cInfo.enStreaming == true)) {
                        /* check if we should move to next pair via bump pcidx */
                        if (!String.valueOf(cInfo.strikePrice).equals(tmpStrike)) {
                            /* strike changed so bump to next pair */
                            pcIdx++;
                            tmpStrike = String.valueOf(cInfo.strikePrice);
                        }
                        qInfo = actChain.getQuote(cInfo.optionSymbol, true /*
                                 * option
                                 */);
                        qInfo.optionSymbol = cInfo.optionSymbol;
                        qInfo.underlying = cInfo.underlying;
                        optionChainArray[CALL][pcIdx] = qInfo;
                    } else {
                    }

                }
                chainNum++;
            }

        }
        optionChainCallArraySz = pcIdx;
        optionChainPutArraySz = pcIdx;

    }
    private void updateTable(String monthin) {
        int line = 0;
        int lpCnt = 0;
        
        for (line = 0, lpCnt = 0; lpCnt < optionChainCallArraySz; lpCnt++ ) {
            if (((optionChainArray[CALL][lpCnt] != null) && 
                 (optionChainArray[PUT][lpCnt] != null)) && 
                 (monthin.equals(optionChainArray[CALL][lpCnt].optionDate))) {
                optionChainTable.getModel().setValueAt(Double.toString(myUtils.roundMe(optionChainArray[CALL][lpCnt].last,2)), line, oLAST);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[CALL][lpCnt].bid), line, oBID);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[CALL][lpCnt].ask), line, oASK);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[CALL][lpCnt].cOpenInterest), line, oOI);
                optionChainTable.getModel().setValueAt(Integer.toString(optionChainArray[CALL][lpCnt].volume), line, oVOLUME);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[CALL][lpCnt].delta), line, oDELTA);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[CALL][lpCnt].strikePrice), line, oSTRIKE);

                optionChainTable.getModel().setValueAt(Double.toString(myUtils.roundMe(optionChainArray[PUT][lpCnt].last, 2)), line, oLAST + 7);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[PUT][lpCnt].bid), line, oBID + 7);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[PUT][lpCnt].ask), line, oASK + 7);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[PUT][lpCnt].pOpenInterest), line, oOI + 7);
                optionChainTable.getModel().setValueAt(Integer.toString(optionChainArray[PUT][lpCnt].volume), line, oVOLUME + 7);
                optionChainTable.getModel().setValueAt(Double.toString(optionChainArray[PUT][lpCnt].delta), line, oDELTA + 7);
                line++;
            }
        }
        
    }
    private void fillMyOptionChainMonthList() {
        String tmpMonth = null;
        String tmpOptionDate = null;
        int qIdx = 0;
        int lIdx = 0;
        
        //clear out these arrays...so we can fill them fresh...
        for(int i = 0; i < CHAIN_MONTH_SZ; i++) {
            optionChainMonthList[i] = null;
            optionChainMonthOptionSymbol[i] = null;
        }
        // could be null in this array so check...
        while(optionChainArray[CALL][qIdx] == null) {
            qIdx++;
            
        }
        tmpOptionDate = optionChainArray[CALL][qIdx].optionSymbol;
        tmpMonth = optionChainArray[CALL][qIdx++].optionDate;
        /* store the first month */
        optionChainMonthOptionSymbol[lIdx] = tmpOptionDate;
        optionChainMonthList[lIdx++] = tmpMonth;
        while (qIdx < optionChainCallArraySz) {
            if (optionChainArray[CALL][qIdx] == null) {
                
            } else {
                if (!tmpMonth.equals(optionChainArray[CALL][qIdx].optionDate)) {
                    /*
                     * found new option Date month so store in list
                     */
                    optionChainMonthOptionSymbol[lIdx] = optionChainArray[CALL][qIdx].optionSymbol;
                    optionChainMonthList[lIdx++] = optionChainArray[CALL][qIdx].optionDate;

                    tmpMonth = optionChainArray[CALL][qIdx].optionDate;
                }
            }
            qIdx++;
        }
        System.out.println("MonthList is " + lIdx + "in size.");
        monthSelectComboBox.removeAllItems();
        for (qIdx = 0; qIdx < lIdx; qIdx++) {
            monthSelectComboBox.addItem(optionChainMonthList[qIdx]);           
        }


    }
    private void clearOptionChainTable() {
        int rowCount = optionChainTable.getRowCount();
        int colCount = optionChainTable.getColumnCount();
        for (int il = 0; il < rowCount; il++){
            for (int ic = 0; ic < colCount; ic++) {
                optionChainTable.getModel().setValueAt("", il, ic);
            }
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockQuoteTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        optionChainTable = new javax.swing.JTable();
        tickerTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        monthSelectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        optionSymbolLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        stockQuoteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Underlying", "Last", "Bid", "Ask", "Volume"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stockQuoteTable);

        optionChainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Last", "Bid", "Ask", "OI", "Vol", "delta", "Strike", "Last", "Bid", "Ask", "OI", "Vol", "delta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        optionChainTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        optionChainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                optionChainTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(optionChainTable);

        tickerTextField.setToolTipText("Enter Ticker Here");
        tickerTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tickerTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Ticker");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("/-----------------------Call---------------------------------\\");

            jLabel3.setText("/-----------------------Put-------------------------------\\");

                monthSelectComboBox.setToolTipText("Select Option Month");
                monthSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        monthSelectComboBoxActionPerformed(evt);
                    }
                });

                jLabel4.setText("Select Month");

                jLabel6.setText("OptionSymbol:");

                org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(395, 395, 395)
                                        .add(jLabel1)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tickerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(455, 455, 455)
                                        .add(updateButton)))
                                .add(0, 0, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                        .add(355, 355, 355)
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(monthSelectComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(jLabel6)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(optionSymbolLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel3)))
                                .add(29, 29, 29)))
                        .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tickerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(updateButton)
                        .add(18, 18, 18)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(monthSelectComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel4))
                                    .add(jLabel6))
                                .add(0, 12, Short.MAX_VALUE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(26, 26, 26)
                                .add(optionSymbolLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                );

                closeButton.setText("Close");
                closeButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        closeButtonActionPerformed(evt);
                    }
                });

                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(452, 452, 452)
                        .add(closeButton)
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(closeButton)
                        .add(0, 24, Short.MAX_VALUE))
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void tickerTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickerTextFieldActionPerformed
        
        userTicker = tickerTextField.getText();
        
    }//GEN-LAST:event_tickerTextFieldActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int line = 0;
        
        qInfo = actIbApi.getQuote(userTicker, false /*option?*/);
        stockQuoteTable.getModel().setValueAt(userTicker, 0, sTICKER);
        stockQuoteTable.getModel().setValueAt(qInfo.last, 0, sLAST);
        stockQuoteTable.getModel().setValueAt(qInfo.bid, 0, sBID);
        stockQuoteTable.getModel().setValueAt(qInfo.ask, 0, sASK);
        stockQuoteTable.getModel().setValueAt(qInfo.volume, 0, sVOLUME);
        clearOptionChainTable();
        if (userTicker == lastTicker) {
            fillMyOptionChain(userTicker, true /* just update */);
        }else{
            
            fillMyOptionChain(userTicker, false /* get new chain */);
            lastTicker = userTicker;
            fillMyOptionChainMonthList();
            lastUserMonth = userMonth;
        }
        if (userMonth != null) {
            updateTable(userMonth);
        }
        
        //JOptionPane.showMessageDialog(null, "Chain filled!!....");
    }//GEN-LAST:event_updateButtonActionPerformed

    private void monthSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthSelectComboBoxActionPerformed
        if (monthSelectComboBox.getItemCount() > 0 ) {
            userMonth = monthSelectComboBox.getSelectedItem().toString();
            userMonthIdx = monthSelectComboBox.getSelectedIndex();    
        };
        
    }//GEN-LAST:event_monthSelectComboBoxActionPerformed

    private void optionChainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionChainTableMouseClicked
        int row = 0;
        String selMonth = null;
        int lpCnt = 0;
        String optionSym = null;
        String underlying = null;
        boolean foundit = false;
        String strike = null;
        try {
            row = optionChainTable.getSelectedRow();
            System.out.println("optionChainTalbeMouseClicked: " + "row is : " + row);
        }catch(Exception e) {
            System.out.println("optionChainTalbeMouseClicked: Exception!!" + evt);   
        }
        /* need to search for selected month and option with in.. */
        selMonth = userMonth;
        
        strike = String.valueOf(optionChainTable.getModel().getValueAt(row, oSTRIKE));
        
        if ((selMonth != null) && (optionChainMonthList[userMonthIdx] != null)) {
            selMonth = optionChainMonthList[userMonthIdx];
            for (lpCnt = 0; !foundit && (lpCnt < optionChainCallArraySz); lpCnt++) {
                if (       (optionChainArray[CALL][lpCnt] != null)
                        && (optionChainArray[PUT][lpCnt] != null)
                        && (selMonth.equals(optionChainArray[CALL][lpCnt].optionDate))
                        && (strike.equals(Double.toString(optionChainArray[CALL][lpCnt].strikePrice)))) {
                    /*
                     * found it, now use row to index into this area of array
                     */
                   // optionSym = optionChainArray[PUT][lpCnt + row].optionSymbol;
                   // underlying = optionChainArray[PUT][lpCnt + row].underlying;
                     optionSym = optionChainArray[PUT][lpCnt].optionSymbol;
                     underlying = optionChainArray[PUT][lpCnt].underlying;
                    foundit = true;
                }
            }

        }

        System.out.println("optionChainTableMouseClicked: optionSym found is" + optionSym);

        optionSymbolLabel.setText(optionSym);
        retData.dataReady = true;
        retData.optionTicker = optionSym;
        retData.stockTicker = underlying;
    }//GEN-LAST:event_optionChainTableMouseClicked

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox monthSelectComboBox;
    private javax.swing.JTable optionChainTable;
    private javax.swing.JLabel optionSymbolLabel;
    private javax.swing.JTable stockQuoteTable;
    private javax.swing.JTextField tickerTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
